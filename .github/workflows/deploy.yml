name: Deploy to Pterodactyl

on:
  push:
    branches:
      - main  # Déclenche le workflow uniquement sur la branche main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Récupérer le code du dépôt
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Installer Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21' # Assurez-vous que cette version est compatible avec votre projet
          cache: 'npm'

      # Étape 3 : Installer les dépendances
      - name: Install dependencies
        run: npm install

      # Étape 4 : Builder l'application Nuxt.js
      - name: Build Nuxt application
        run: npm run build 

      # Étape 5 : Archiver les fichiers de production
      - name: Archive production artifacts
        run: tar -czvf release.tar.gz .output 

      # Étape 6 : Déployer sur Pterodactyl
      - name: Deploy to Pterodactyl
        env:
          PTERODACTYL_PANEL_URL: ${{ secrets.PTERODACTYL_PANEL_URL }} 
          PTERODACTYL_API_KEY: ${{ secrets.PTERODACTYL_API_KEY }}    
          PTERODACTYL_SERVER_ID: ${{ secrets.PTERODACTYL_SERVER_ID }} 
        run: |
          echo "=== Début du déploiement vers Pterodactyl ==="

          # Vérifier que les secrets sont définis
          if [ -z "$PTERODACTYL_PANEL_URL" ] || [ -z "$PTERODACTYL_API_KEY" ] || [ -z "$PTERODACTYL_SERVER_ID" ]; then
            echo "Erreur : Les secrets PTERODACTYL_PANEL_URL, PTERODACTYL_API_KEY ou PTERODACTYL_SERVER_ID ne sont pas définis."
            exit 1
          fi

          echo "Secrets vérifiés avec succès."

          # Obtenir une URL d'upload sécurisée depuis l'API Pterodactyl
          UPLOAD_URL_RESPONSE=$(curl -s -X GET \
            "$PTERODACTYL_PANEL_URL/api/client/servers/$PTERODACTYL_SERVER_ID/files/upload" \
            -H "Authorization: Bearer $PTERODACTYL_API_KEY" \
            -H "Accept: application/json")
          
          UPLOAD_URL=$(echo "$UPLOAD_URL_RESPONSE" | grep -o '"url":"[^"]*' | grep -o '[^"]*$')

          if [ -z "$UPLOAD_URL" ]; then
            echo "Erreur : Impossible d'obtenir l'URL d'upload depuis Pterodactyl."
            echo "Réponse de l'API : $UPLOAD_URL_RESPONSE"
            exit 1
          fi

          echo "URL d'upload obtenue : $UPLOAD_URL"

          # Uploader l'archive
          curl -s -X POST \
            "$UPLOAD_URL" \
            -H "Authorization: Bearer $PTERODACTYL_API_KEY" \
            -F "files=@release.tar.gz"
          
          echo "Archive uploadée avec succès sur le serveur."

          # Supprimer l'ancien dossier .output s'il existe
          curl -s -X POST \
            "$PTERODACTYL_PANEL_URL/api/client/servers/$PTERODACTYL_SERVER_ID/files/delete" \
            -H "Authorization: Bearer $PTERODACTYL_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "root": "/",
                  "files": [".output"]
                }'
          echo "Ancien dossier .output supprimé."

          # Décompresser la nouvelle archive
          curl -s -X POST \
            "$PTERODACTYL_PANEL_URL/api/client/servers/$PTERODACTYL_SERVER_ID/files/decompress" \
            -H "Authorization: Bearer $PTERODACTYL_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "root": "/",
                  "file": "release.tar.gz"
                }'
          echo "Nouvelle archive décompressée avec succès."

          # Supprimer l'archive après décompression
          curl -s -X POST \
            "$PTERODACTYL_PANEL_URL/api/client/servers/$PTERODACTYL_SERVER_ID/files/delete" \
            -H "Authorization: Bearer $PTERODACTYL_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "root": "/",
                  "files": ["release.tar.gz"]
                }'
          echo "Archive release.tar.gz supprimée du serveur."

          # Redémarrer le serveur
          curl -s -X POST \
            "$PTERODACTYL_PANEL_URL/api/client/servers/$PTERODACTYL_SERVER_ID/power" \
            -H "Authorization: Bearer $PTERODACTYL_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{ "signal": "restart" }'
          
          echo "Commande de redémarrage du serveur envoyée."
          echo "=== Déploiement terminé ==="