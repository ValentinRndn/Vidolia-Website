name: Build and Deploy Nuxt 3 to Pterodactyl

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Étape 1 : Récupérer le code
    - name: Checkout code
      uses: actions/checkout@v3

    # Étape 2 : Installer Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '21'  # Assurez-vous que la version correspond à votre projet

    # Étape 3 : Installer les dépendances
    - name: Install dependencies
      run: npm install

    # Étape 4 : Builder le projet Nuxt
    - name: Build the project
      run: npm run build

    # Étape 5 : Vérifier et copier les fichiers buildés
    - name: Copy built files
      run: |
        if [ ! -d ".output/public" ]; then
          echo "Erreur : Le dossier de build '.output/public' est introuvable."
          exit 1
        fi
        mkdir build-output
        cp -r .output/public/* build-output/
        echo "Les fichiers buildés ont été copiés dans 'build-output'."

    # Étape 6 : Déployer les fichiers vers Pterodactyl
    - name: Deploy to Pterodactyl
      env:
        PTERODACTYL_PANEL_URL: ${{ secrets.PTERODACTYL_PANEL_URL }}
        PTERODACTYL_API_KEY: ${{ secrets.PTERODACTYL_API_KEY }}
        PTERODACTYL_SERVER_ID: ${{ secrets.PTERODACTYL_SERVER_ID }}
      run: |
        echo "Récupération de l'URL d'upload depuis Pterodactyl..."
        UPLOAD_URL_RESPONSE=$(curl -s -X GET \
          "$PTERODACTYL_PANEL_URL/api/client/servers/$PTERODACTYL_SERVER_ID/files/upload" \
          -H "Authorization: Bearer $PTERODACTYL_API_KEY" \
          -H "Accept: application/json")

        echo "Réponse brute de l'API : $UPLOAD_URL_RESPONSE"

        UPLOAD_URL=$(echo "$UPLOAD_URL_RESPONSE" | grep -o '"url":"[^"]*' | grep -o '[^"]*$')
        if [ -z "$UPLOAD_URL" ]; then
          echo "Erreur : URL d'upload non trouvée dans la réponse API."
          exit 1
        fi
        echo "URL d'upload obtenue : $UPLOAD_URL"

        echo "Compression des fichiers buildés..."
        tar -czf build-output.tar.gz -C build-output .
        if [ $? -ne 0 ]; then
          echo "Erreur : Échec de la compression des fichiers buildés."
          exit 1
        fi

        echo "Déploiement des fichiers vers Pterodactyl..."
        UPLOAD_RESPONSE=$(curl -s -X POST "$UPLOAD_URL" \
          -H "Authorization: Bearer $PTERODACTYL_API_KEY" \
          -F "file=@build-output.tar.gz")

        echo "Réponse de l'upload : $UPLOAD_RESPONSE"

        if echo "$UPLOAD_RESPONSE" | grep -q '"errors"'; then
          echo "Erreur : Échec de l'upload des fichiers."
          exit 1
        fi

    # Étape 7 : Redémarrer le serveur
    - name: Restart server
      env:
        PTERODACTYL_PANEL_URL: ${{ secrets.PTERODACTYL_PANEL_URL }}
        PTERODACTYL_API_KEY: ${{ secrets.PTERODACTYL_API_KEY }}
        PTERODACTYL_SERVER_ID: ${{ secrets.PTERODACTYL_SERVER_ID }}
      run: |
        echo "Redémarrage du serveur..."
        curl -X POST \
          "$PTERODACTYL_PANEL_URL/api/client/servers/$PTERODACTYL_SERVER_ID/power" \
          -H "Authorization: Bearer $PTERODACTYL_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{ "signal": "restart" }'
        echo "Serveur redémarré avec succès."